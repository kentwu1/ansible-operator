---
- name: MSO KubeFed Operator Playbook 
  connection: local
  hosts: localhost
  vars:
    host: "{{ lookup('file', '/opt/ansible/mso-access/host') }}"
    user: "{{ lookup('file', '/opt/ansible/mso-access/username') }}"
    passwd: "{{ lookup('file', '/opt/ansible/mso-access/password') }}"
    schema: "mso_ansible_operator_{{ meta.name }}"
    desired_state: "{{ state }}"
  # TBD: Take care of the update case
  tasks:
  - debug:
      msg: "host: {{ host }}, user: {{ user }}, pass: {{ passwd }}, tenant: {{ tenant }}"
  - debug:
      var: controller_cluster
  - debug:
      var: worker_clusters
  - name: Set the default site_list
    set_fact:
      site_list: ["{{ controller_cluster.site }}"]
  - name: Set the site list
    set_fact:
      site_list: "{{ site_list + [item.site] }}"
    with_items: "{{ worker_clusters }}"
    when: (item.site is defined) and (item.site not in site_list)
  - debug:
      msg: "sites: {{ site_list }}"
  - name: Undeploy the Common templates on all the sites
    when: desired_state == 'absent'
    ignore_errors: yes
    mso_schema_template_deploy:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: 'Common-{{ item[0] }}'
      site: '{{ item[1] }}'
      state: undeploy
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    with_nested:
    - ["{{ tenant }}", common]
    - '{{ site_list }}'
  - name: Undeploy the controller templates
    when: desired_state == 'absent'
    ignore_errors: yes
    mso_schema_template_deploy:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      site: '{{ controller_cluster.site }}'
      template: '{{ controller_cluster.site }}-{{ item }}'
      state: undeploy
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: ["{{ tenant }}", common]
  - name: Undeploy the worker templates
    when: desired_state == 'absent'
    ignore_errors: yes
    mso_schema_template_deploy:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      site: '{{ item[1].site }}'
      template: '{{ item[1].site }}-{{ item[0] }}'
      state: undeploy
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    with_nested:
    - ["{{ tenant }}", common]
    - '{{ worker_clusters }}'
  - name: Delete the schema
    when: desired_state == 'absent'
    ignore_errors: yes
    mso_schema:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      state: absent
      use_proxy: no
      use_ssl: yes
      validate_certs: no
  - name: Add/Delete the tenant
    ignore_errors: yes
    cisco.mso.mso_tenant:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      tenant:  "{{ tenant }}"
      display_name: "{{ tenant }}"
      sites: "{{ site_list }}"
      use_proxy: no
      use_ssl: yes
      validate_certs: no
      state: '{{ desired_state }}'
  - name: Add/Delete the common tenant
    ignore_errors: yes
    cisco.mso.mso_tenant:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      tenant:  common
      display_name: common
      sites: "{{ site_list }}"
      use_proxy: no
      use_ssl: yes
      validate_certs: no
      state: '{{ desired_state }}'
  - name: Add the Common templates to the schema
    when: desired_state == 'present'
    mso_schema_template:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: 'Common-{{ item }}'
      tenant: "{{ item }}"
      state: '{{ desired_state }}'
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: ["{{ tenant }}", common]
  - name: Add all the sites to the Common templates
    when: desired_state == 'present'
    mso_schema_site:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      site: '{{ item[1] }}'
      template: 'Common-{{ item[0] }}'
      state: '{{ desired_state }}'
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    with_nested:
    - ["{{ tenant }}", common]
    - '{{ site_list }}'
  - name: Set the default vrf_list
    set_fact:
      vrf_list: ["{{ controller_cluster.vrf }}"]
  - name: Set the vrf list
    set_fact:
      vrf_list: "{{ vrf_list + [item.vrf] }}"
    with_items: "{{ worker_clusters }}"
    when: (item.vrf is defined) and (item.vrf not in vrf_list)
  - debug:
      msg: "VRFs: {{ vrf_list }}"
  - name: Add the VRF to the Common template if there is only one VRF totally
    mso_schema_template_vrf:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: 'Common-{{ item }}'
      vrf: '{{ controller_cluster.vrf.name }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: ["{{ tenant }}", common]
    when: (desired_state == 'present') and (vrf_list|length == 1) and (controller_cluster.vrf.tenant == item)
  - name: Add the ICMP filter entry to the Common template
    when: desired_state == 'present'
    mso_schema_template_filter_entry:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: 'Common-{{ tenant }}'
      filter: KubeFed
      entry: ICMP
      ethertype: ip
      ip_protocol: icmp
      state: '{{ desired_state }}'
      use_proxy: no
      use_ssl: yes
      validate_certs: no
  - name: Add the KubeApi filter entries to the Common template
    when: desired_state == 'present'
    mso_schema_template_filter_entry:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: 'Common-{{ tenant }}'
      filter: KubeFed
      entry: "kubeAPI-{{ item }}"
      ethertype: ip
      ip_protocol: tcp
      destination_from: "{{ item }}"
      destination_to: "{{ item }}"
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: ["6443", "8443"]
  - name: Add KubeFed contract filter to the Common template
    when: desired_state == 'present'
    mso_schema_template_contract_filter:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: 'Common-{{ tenant }}'
      contract: KubeFed
      contract_filter_type: both-way
      filter: KubeFed
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
  - name: Add the controller templates to the schema
    when: desired_state == 'present'
    mso_schema_template:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ item }}'
      tenant: "{{ item }}"
      state: '{{ desired_state }}'
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: ["{{ tenant }}", common]
  - name: Add the site to the controller templates
    when: desired_state == 'present'
    mso_schema_site:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      site: '{{ controller_cluster.site }}'
      template: '{{ controller_cluster.site }}-{{ item }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: ["{{ tenant }}", common]
  - name: Add the VRF to the right controller template for multiple VRFs
    mso_schema_template_vrf:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ item }}'
      vrf: '{{ controller_cluster.vrf.name }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: ["{{ tenant }}", common]
    when: (desired_state == 'present') and (vrf_list|length > 1) and (controller_cluster.vrf.tenant == item)
  # TBD: fix the l_3_out variable bug?
  - name: Add the l3out to the right controller template for multiple VRFs
    mso_schema_template_l3out:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ item }}'
      l3out: '{{ controller_cluster.l_3_out.name }}'
      vrf:
        template: '{{ controller_cluster.site }}-{{ controller_cluster.vrf.tenant }}'
        name: '{{ controller_cluster.vrf.name }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: ["{{ tenant }}", common]
    when: (desired_state == 'present') and (vrf_list|length > 1) and (controller_cluster.l_3_out.tenant == item)
  - name: Add the l3out to the right controller template for only one common VRf
    mso_schema_template_l3out:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ item }}'
      l3out: '{{ controller_cluster.l_3_out.name }}'
      vrf:
        template: 'Common-{{ controller_cluster.vrf.tenant }}'
        name: '{{ controller_cluster.vrf.name }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: ["{{ tenant }}", common]
    when: (desired_state == 'present') and (vrf_list|length == 1) and (controller_cluster.l_3_out.tenant == item)
  - name: Add BDs to the controller template for multiple VRFs
    mso_schema_template_bd:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ tenant }}'
      bd: 'aci-containers-{{ controller_cluster.system_id }}-{{ item }}'
      layer2_stretch: false
      layer2_unknown_unicast: proxy
      vrf:
        template: '{{ controller_cluster.site }}-{{ controller_cluster.vrf.tenant }}'
        name: '{{ controller_cluster.vrf.name }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: [node-bd, pod-bd]
    when: (desired_state == 'present') and (vrf_list|length > 1)
  - name: Add BDs to the controller template for only one common VRF
    mso_schema_template_bd:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ tenant }}'
      bd: 'aci-containers-{{ controller_cluster.system_id }}-{{ item }}'
      layer2_stretch: false
      layer2_unknown_unicast: proxy
      vrf:
        template: 'Common-{{ controller_cluster.vrf.tenant }}'
        name: '{{ controller_cluster.vrf.name }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: [node-bd, pod-bd]
    when: (desired_state == 'present') and (vrf_list|length == 1)
  - name: Add site BDs to the controller template
    when: desired_state == 'present'
    mso_schema_site_bd:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ tenant }}'
      site: '{{ controller_cluster.site }}'
      bd: 'aci-containers-{{ controller_cluster.system_id }}-{{ item }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: [node-bd, pod-bd]
  - name: Add site node BD subnet to the controller template
    when: desired_state == 'present'
    mso_schema_site_bd_subnet:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ tenant }}'
      site: '{{ controller_cluster.site }}'
      bd: 'aci-containers-{{ controller_cluster.system_id }}-node-bd'
      subnet: '{{ controller_cluster.node_bd_subnet }}'
      scope: public
      shared: no
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
  - name: Add site pod BD subnet to the controller template
    when: desired_state == 'present'
    mso_schema_site_bd_subnet:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ tenant }}'
      site: '{{ controller_cluster.site }}'
      bd: 'aci-containers-{{ controller_cluster.system_id }}-pod-bd'
      subnet: '{{ controller_cluster.pod_bd_subnet }}'
      scope: public
      shared: no
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
  - name: Add site BD l3outs to the controller template
    when: desired_state == 'present'
    mso_schema_site_bd_l3out:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ tenant }}'
      l3out: '{{ controller_cluster.l_3_out.name }}'
      site: '{{ controller_cluster.site }}'
      bd: 'aci-containers-{{ controller_cluster.system_id }}-{{ item }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: [node-bd, pod-bd]
  - name: Add AP to the controller template
    when: desired_state == 'present'
    mso_schema_template_anp:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ tenant }}'
      anp: 'aci-containers-{{ controller_cluster.system_id }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
  - name: Add the node EPG to the controller template
    when: desired_state == 'present'
    mso_schema_template_anp_epg:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ tenant }}'
      anp: 'aci-containers-{{ controller_cluster.system_id }}'
      epg: aci-containers-nodes
      bd:
        template: '{{ controller_cluster.site }}-{{ tenant }}'
        name: 'aci-containers-{{ controller_cluster.system_id }}-node-bd'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
  - name: Add the kubefed EPG to the controller template
    when: desired_state == 'present'
    mso_schema_template_anp_epg:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ tenant }}'
      anp: 'aci-containers-{{ controller_cluster.system_id }}'
      epg: '{{ controller_cluster.kubefed_epg }}'
      bd:
        template: '{{ controller_cluster.site }}-{{ tenant }}'
        name: 'aci-containers-{{ controller_cluster.system_id }}-pod-bd'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
  # Configure policies for worker clusters
  - name: Add the worker templates to the schema
    when: desired_state == 'present'
    mso_schema_template:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ item[1].site }}-{{ item[0] }}'
      tenant: "{{ item[0] }}"
      state: '{{ desired_state }}'
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    with_nested:
    - ["{{ tenant }}", common]
    - '{{ worker_clusters }}'
  - name: Add the site to the worker templates
    when: desired_state == 'present'
    mso_schema_site:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      site: '{{ item[1].site }}'
      template: '{{ item[1].site }}-{{ item[0] }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    with_nested:
    - ["{{ tenant }}", common]
    - '{{ worker_clusters }}'
  - name: Add the VRF to the right worker templates for multiple VRFs
    mso_schema_template_vrf:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ item[1].site }}-{{ item[0] }}'
      vrf: '{{ item[1].vrf.name }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    with_nested:
    - ["{{ tenant }}", common]
    - '{{ worker_clusters }}'
    when: (desired_state == 'present') and (vrf_list|length > 1) and (item[1].vrf.tenant == item[0])
  # TBD: fix the l_3_out variable bug?
  - name: Add the l3out to the right worker templates for multiple VRFs
    mso_schema_template_l3out:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ item[1].site }}-{{ item[0] }}'
      l3out: '{{ item[1].l_3_out.name }}'
      vrf:
        template: '{{ item[1].site }}-{{ item[1].vrf.tenant }}'
        name: '{{ item[1].vrf.name }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    with_nested:
    - ["{{ tenant }}", common]
    - '{{ worker_clusters }}'
    when: (desired_state == 'present') and (vrf_list|length > 1) and (item[1].l_3_out.tenant == item[0])
  - name: Add the l3out to the right worker templates for one common VRF
    mso_schema_template_l3out:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ item[1].site }}-{{ item[0] }}'
      l3out: '{{ item[1].l_3_out.name }}'
      vrf:
        template: 'Common-{{ item[1].vrf.tenant }}'
        name: '{{ item[1].vrf.name }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    with_nested:
    - ["{{ tenant }}", common]
    - '{{ worker_clusters }}'
    when: (desired_state == 'present') and (vrf_list|length == 1) and (item[1].l_3_out.tenant == item[0])
  - name: Add BDs to the worker templates for multiple VRFs
    mso_schema_template_bd:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ item.site }}-{{ tenant }}'
      bd: 'aci-containers-{{ item.system_id }}-node-bd'
      layer2_stretch: false
      layer2_unknown_unicast: proxy
      vrf:
        template: '{{ item.site }}-{{ item.vrf.tenant }}'
        name: '{{ item.vrf.name }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: '{{ worker_clusters }}'
    when: (desired_state == 'present') and (vrf_list|length > 1)
  - name: Add BDs to the worker templates for only one common VRF
    mso_schema_template_bd:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ item.site }}-{{ tenant }}'
      bd: 'aci-containers-{{ item.system_id }}-node-bd'
      layer2_stretch: false
      layer2_unknown_unicast: proxy
      vrf:
        template: 'Common-{{ item.vrf.tenant }}'
        name: '{{ item.vrf.name }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: '{{ worker_clusters }}'
    when: (desired_state == 'present') and (vrf_list|length == 1)
  - name: Add site BDs to the worker templates
    when: desired_state == 'present'
    mso_schema_site_bd:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ item.site }}-{{ tenant }}'
      site: '{{ item.site }}'
      bd: 'aci-containers-{{ item.system_id }}-node-bd'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: '{{ worker_clusters }}'
  - name: Add site node BD subnet to the worker templates
    when: desired_state == 'present'
    mso_schema_site_bd_subnet:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ item.site }}-{{ tenant }}'
      site: '{{ item.site }}'
      bd: 'aci-containers-{{ item.system_id }}-node-bd'
      subnet: '{{ item.node_bd_subnet }}'
      scope: public
      shared: no
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: '{{ worker_clusters }}'
  - name: Add site BD l3outs to the worker templates
    when: desired_state == 'present'
    mso_schema_site_bd_l3out:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ item.site }}-{{ tenant }}'
      l3out: '{{ item.l_3_out.name }}'
      site: '{{ item.site }}'
      bd: 'aci-containers-{{ item.system_id }}-node-bd'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: '{{ worker_clusters }}'
  - name: Add AP to the worker templates
    when: desired_state == 'present'
    mso_schema_template_anp:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ item.site }}-{{ tenant }}'
      anp: 'aci-containers-{{ item.system_id }}'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: '{{ worker_clusters }}'
  - name: Add the node EPG to the worker templates
    when: desired_state == 'present'
    mso_schema_template_anp_epg:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ item.site }}-{{ tenant }}'
      anp: 'aci-containers-{{ item.system_id }}'
      epg: aci-containers-nodes
      bd:
        template: '{{ item.site }}-{{ tenant }}'
        name: 'aci-containers-{{ item.system_id }}-node-bd'
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: '{{ worker_clusters }}'
  # Assign the kubefed contract to the EPGs
  - name: Add the consumer contract to the 2 EPGs in the controller cluster
    when: desired_state == 'present'
    mso_schema_template_anp_epg_contract:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ tenant }}'
      anp: 'aci-containers-{{ controller_cluster.system_id }}'
      epg: '{{ item }}'
      contract:
        schema: "{{ schema }}"
        template: 'Common-{{ tenant }}'
        name: KubeFed
        type: consumer
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: [aci-containers-nodes, '{{ controller_cluster.kubefed_epg }}']
  - name: Add the provider contract to the EPG of those workers
    when: desired_state == 'present'
    mso_schema_template_anp_epg_contract:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ item.site }}-{{ tenant }}'
      anp: 'aci-containers-{{ item.system_id }}'
      epg: aci-containers-nodes
      contract:
        schema: "{{ schema }}"
        template: 'Common-{{ tenant }}'
        name: KubeFed
        type: provider
      state: present
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: '{{ worker_clusters }}'
  - name: Deploy Common templates
    when: desired_state == 'present'
    mso_schema_template_deploy:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: 'Common-{{ item }}'
      state: deploy
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: [common, "{{ tenant }}"]
  - name: Deploy the controller templates
    when: desired_state == 'present'
    mso_schema_template_deploy:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ controller_cluster.site }}-{{ item }}'
      state: deploy
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    loop: [common, "{{ tenant }}"]
  - name: Deploy the worker templates
    when: desired_state == 'present'
    mso_schema_template_deploy:
      host: "{{ host }}"
      username: "{{ user }}"
      password: "{{ passwd }}"
      schema: "{{ schema }}"
      template: '{{ item[1].site }}-{{ item[0] }}'
      state: deploy
      use_proxy: no
      use_ssl: yes
      validate_certs: no
    with_nested:
    - [common, "{{ tenant }}"]
    - '{{ worker_clusters }}'
